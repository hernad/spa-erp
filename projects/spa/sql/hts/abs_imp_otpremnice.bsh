import com.borland.dx.sql.dataset.QueryDataSet;

void initOtpremnice() {
	now = new java.sql.Timestamp(System.currentTimeMillis());
	seqopis2 = "1000"+"OTP"+Util.getUtil().getYear(now);
	intseq = Valid.getValid().findSeqInteger(seqopis2, false, false).intValue();
  otp_num = "8"+Valid.getValid().maskZeroInteger(new Integer(intseq-1),9);
  //otp_num > 31282(seq) i delivery_date >= 01-10-2007
  godset = Util.getNewQueryDataSet("select max(god) as god from Knjigod WHERE app='robno' and corg='01'");
  stanje = hr.restart.baza.Stanje.getDataModule().getTempSet(Condition.equal("GOD",godset.getString("GOD")));
  stanje.open();
  newotp = doki.getDataModule().getTempSet("0=1");
  newotp.open();
  newstotp = stdoki.getDataModule().getTempSet("0=1");
  newstotp.open();
}

void add_stotp_keys() {
  newstotp.insertRow(false);
  raVariant.copyTo(ABSotp, newstotp, "cradnal,cpar,datdok,cart1,kol,veza");
  newstotp.setInt("BRDOK",Integer.valueOf(newstotp.getString("CRADNAL").trim().substring(1)).intValue());
  newstotp.setString("CSKL","1000");
  newstotp.setString("VRDOK","OTP");
}

void add_stotp_values() {
  newstotp.setInt("CART",arts.getInt("CART"));
  newstotp.setString("BC",arts.getString("BC"));
  newstotp.setString("NAZART",arts.getString("NAZART"));
  newstotp.setString("JM",arts.getString("JM"));
  newstotp.setBigDecimal("NC",stanje.getBigDecimal("NC"));
  newstotp.setBigDecimal("INAB",newstotp.getBigDecimal("NC").multiply(newstotp.getBigDecimal("KOL")));
  newstotp.setBigDecimal("VC",stanje.getBigDecimal("VC"));
  newstotp.setBigDecimal("IBP",newstotp.getBigDecimal("VC").multiply(newstotp.getBigDecimal("KOL")));
  newstotp.setBigDecimal("MC",stanje.getBigDecimal("MC"));
  newstotp.setBigDecimal("ISP",newstotp.getBigDecimal("MC").multiply(newstotp.getBigDecimal("KOL")));
  newstotp.setBigDecimal("ZC",newstotp.getBigDecimal("NC"));
  newstotp.setBigDecimal("IRAZ",newstotp.getBigDecimal("ZC").multiply(newstotp.getBigDecimal("KOL")));
  newstotp.setString("CSKLART",newstotp.getString("CSKL"));
}

boolean find_art_stanje(String _cart1) {//newstotp.getString("CART1")
  if (!lookupData.getlookupData().raLocate(arts,"CART1",_cart1)) {
    lookupData.getlookupData().raLocate(arts,"CART","1");
  }
  if (lookupData.getlookupData().raLocate(stanje,new String[] {"CART","CSKL"},new String[] {arts.getInt("CART")+"","1000"})) {
    return true;
  } 
  if (_cart1.trim().endsWith("P")) {
    return find_stanje(new VarStr(_cart1.trim()).chop().toString().trim());
  }
  return false;
}

boolean add_otp() {
//tu ces morati ralocate ako kod drugog prolaza mozda postoji ta otpremnica
  String br_otp=newstotp.getInt("BRDOK")+"";
  if (brotps.add(br_otp)) {//returns true if the set did not already contain the specified element.
    newotp.insertRow(false);
    raVariant.copyTo(ABSotp, newotp, "njesra,cpar,datdok,cart1,kol,pnbz2,sysdat");
    newotp.setInt("BRDOK",newstotp.getInt("BRDOK"));
    newotp.setString("CSKL",newstotp.getString("CSKL"));
    newotp.setString("VRDOK",newstotp.getString("VRDOK"));
    newotp.setString("GOD",Util.getUtil().getYear(newotp.getTimestamp("datdok")));
    newotp.post();
    return true;
  } else {
    lookupData.getlookupData().raLocate(newotp,"BRDOK",br_otp);
    return false;
  }
}

void loop_with() {
  int bo = -1;
  int rbs = 0;
  for (ABSotp.first(); ABSotp.inBounds(); ABSotp.next()) {
    if (ABSotp.getDate("DELIVERYDATE").before(java.sql.Date.valueOf("2007-12-31"))) {
    	continue;
    }

    add_stotp_keys();

    if (find_art_stanje(newstotp.getString("CART1"))) {

      add_stotp_values();

    } else {
      System.out.println("Ne mogu pronaci stanje za artikl "+newstotp.getString("CART1"));
    }

    _bo = newstotp.getInt("BRDOK");
    if (bo != _bo) {
      rbs = (add_otp())?1:101;
      bo=_bo;    
    } else {
      rbs++;
    }
    newstotp.setString("GOD",newotp.getString("GOD"));
    newstotp.setShort("RBR",(short)rbs);

    newstotp.post();
  }
}

initOtpremnice();
HashSet brotps = new HashSet(); 
ABSotp = orac.getData("DeliveryNotePerCustomerPerTypeOfMerchandise.sql",otp_num);
loop_with();
//new
ABSotp = orac.getData("DeliveryNotePerCustomerPerTypeOfMerchandiseNotSales.sql",otp_num);
loop_with();


